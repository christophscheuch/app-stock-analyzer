---
title: "Stock Analyzer"
author: "Christoph Scheuch"
format: dashboard
server: shiny
---

```{r}
#| context: setup
library(dplyr)
library(tidyr)
library(gt)
library(gtExtras)
library(svglite)
library(scales)

stock_data <- readRDS("data/stock_data.rds")
capm_data <- readRDS("data/capm_data.rds")
stocks <- unique(stock_data$symbol)

# TODO: add 52 week range
# TODO: add average trading volume
# TODO: add daily trading volume as bar charts
# TODO: make table reactive
```

```{r}
selectizeInput("selected_symbols", "Select one or more symbols", choices = NULL, multiple = TRUE)
```

```{r}
gt_output("table_summary")
```

```{r}
#| context: server
updateSelectizeInput(session, "selected_symbols", choices = stocks, server = TRUE)

# input <- list()
# input$selected_symbols <- c("MSFT", "MCD", "UNH", "AAPL")

capm_data_prepared <- reactive({
  if (is.null(input$selected_symbols)) {
    return(NULL)
  } else {
    capm_data |> 
      filter(symbol %in% input$selected_symbols) |> 
                  filter(p_value <= 0.05) |> 
                  select(symbol, term, estimate) |> 
                  pivot_wider(id_cols = symbol, names_from = term, values_from = estimate) |> 
                  mutate(beta = as.character(round(beta, 2)), 
                         alpha = percent(alpha, accuracy = 1L),
                         across(c(alpha, beta), ~if_else(is.na(.), "", .)))
      }
})

stock_data_prepared <- reactive({
   if (is.null(input$selected_symbols)) {
    return(NULL)
   } else {
      stock_data |> 
        filter(symbol %in% input$selected_symbols) |> 
        group_by(symbol) |> 
        summarize(
          mean = percent((1+mean(ret))^252-1, accuracy = 1L),
          sd = percent(sd(ret)*sqrt(252), accuracy = 1L),
          sharpe_ratio = round(mean(ret) / sd(ret) * sqrt(252), 2),
          adjusted_data = list(adjusted[date >= Sys.Date()-365]), 
          ret_data = list(ret[date >= Sys.Date()-365]),
          last_price = round(last(adjusted), 0),
          distance_from_ath = last(adjusted) / max(adjusted),
          .groups = "drop") |>
        mutate(
          image = symbol
        ) |> 
        left_join(capm_data_prepared(), join_by(symbol)) |> 
        select(image, symbol, mean, sd, alpha, beta, everything()) 
   }
})

output$table_summary <- render_gt({
  if (is.null(input$selected_symbols)) {
    gt(tibble())
  } else {
    stock_data_prepared() |> 
      gt() |>
      text_transform(
        locations = cells_body(columns = image),
        fn = function(x) {
          local_image(
            filename = paste0("data/logos/", x, ".webp")
          )
        }
      ) |> 
      gt_plt_dist(ret_data, trim = TRUE) |> 
      gt_plt_sparkline(adjusted_data, type = "shaded", same_limit = FALSE, label = FALSE, 
                       palette = c("black", NA, NA, NA, "grey")) |> 
      gt_plt_bar_pct(distance_from_ath, fill = "black", background = "lightgrey", width = 75) |> 
      cols_label(image = "",
                 symbol = "", 
                 mean = "Return",
                 sd = "Volatility",
                 sharpe_ratio = "SR",
                 alpha = "Alpha",
                 beta = "Beta",
                 adjusted_data = "Prices",
                 ret_data = "Returns",
                 last_price = "Price",
                 distance_from_ath = html("&Delta; ATH")) |> 
      cols_align(columns = distance_from_ath, "center") |> 
      tab_spanner(
        label = "Last 12 Months",
        columns = c(adjusted_data, ret_data)
      ) |>  
      tab_spanner(
        label = "Yesterday",
        columns = c(last_price, distance_from_ath)
      ) |> 
      tab_spanner(
        label = "Annualized",
        columns = c(mean, sd, sharpe_ratio)
      ) |> 
      tab_spanner(
        label = "CAPM",
        columns = c(alpha, beta)
      ) |> 
      tab_footnote(
        footnote = "CAPM shows only coefficients that are statistically significant at 5%.",
        locations = cells_column_spanners("CAPM")
      ) 
  }
})

```

